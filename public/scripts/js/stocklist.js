// Generated by CoffeeScript 1.9.2
(function() {
  var AddProduct, ProductList, Row, Table, div, form, h2, h3, input, option, ref, select, span, table, tbody, td, text, th, thead, tr;

  ref = React.DOM, h3 = ref.h3, h2 = ref.h2, div = ref.div, form = ref.form, text = ref.text, select = ref.select, option = ref.option, input = ref.input, span = ref.span, table = ref.table, thead = ref.thead, tr = ref.tr, td = ref.td, th = ref.th, tbody = ref.tbody;

  AddProduct = React.createClass({
    handleSubmit: function(e) {
      var cat, name, price, stock;
      e.preventDefault();
      cat = (React.findDOMNode(this.refs.category)).value.trim();
      name = (React.findDOMNode(this.refs.name)).value.trim();
      price = (React.findDOMNode(this.refs.price)).value;
      stock = (React.findDOMNode(this.refs.stocked)).checked;
      if (!cat || !name || !price) {
        return;
      }
      this.props.addProduct({
        category: cat,
        price: price,
        stocked: stock,
        name: name
      });
      (React.findDOMNode(this.refs.category)).value = '';
      (React.findDOMNode(this.refs.name)).value = '';
      (React.findDOMNode(this.refs.price)).value = '';
      (React.findDOMNode(this.refs.stocked)).checked = false;
    },
    render: function() {
      return div({
        className: 'addProduct'
      }, h3({}, 'Add a product'), form({
        className: 'commentForm',
        onSubmit: this.handleSubmit
      }, select({
        ref: 'category'
      }, option({
        value: '',
        disabled: 'disabled',
        selected: 'true'
      }, 'Category'), option({
        value: 'Magic'
      }, 'Magic'), option({
        value: 'Potions'
      }, 'Potions'), option({
        value: 'Frogs'
      }, 'Frogs'), option({
        value: 'Markers'
      }, 'Markers'), option({
        value: 'Wands'
      }, 'Wands'), option({
        value: 'Other'
      }, 'Other')), input({
        type: 'text',
        placeholder: 'Product',
        ref: 'name'
      }), text({}, '$'), input({
        type: 'number',
        min: '0',
        step: '0.01',
        placeholder: 'Price',
        ref: 'price'
      }), input({
        type: 'checkbox',
        ref: 'stocked',
        id: 'instock'
      }, 'In Stock'), input({
        type: 'submit',
        value: 'Add'
      })));
    }
  });

  Row = React.createClass({
    render: function() {
      var cat, instock, name, price;
      instock = this.props.product.stocked && this.props.product.stocked !== 'false';
      cat = instock ? span({
        style: {
          color: 'blue'
        }
      }, this.props.product.category) : span({
        style: {
          color: 'red'
        }
      }, this.props.product.category);
      name = instock ? this.props.product.name : span({
        style: {
          color: 'red'
        }
      }, this.props.product.name);
      price = (parseFloat(this.props.product.price)).toFixed(2);
      return tr({}, td({}, cat), td({}, name), td({}, '$' + price));
    }
  });

  Table = React.createClass({
    render: function() {
      var i, j, len, product, ref1, rows;
      rows = [];
      ref1 = this.props.products;
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        product = ref1[i];
        rows.push(React.createFactory(Row)({
          product: product,
          key: i
        }));
      }
      return table({}, thead({}, tr({}, th({}, 'Category'), th({}, 'Name'), th({}, 'Price'))), tbody({}, rows));
    }
  });

  ProductList = React.createClass({
    loadProducts: function() {
      return $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: (function(data) {
          this.setState({
            data: data
          });
        }).bind(this),
        error: (function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }).bind(this)
      });
    },
    getInitialState: function() {
      return {
        data: []
      };
    },
    handleAddProduct: function(product) {
      var products;
      products = this.state.data;
      products.push(product);
      return this.setState({
        data: products
      }, function() {
        $.ajax({
          url: this.props.url,
          dataType: 'json',
          type: 'POST',
          data: product,
          success: (function(data) {
            this.setState({
              data: data
            });
          }).bind(this),
          error: (function(xhr, status, err) {
            console.error(this.props.url, status, err.toString());
          }).bind(this)
        });
      });
    },
    componentDidMount: function() {
      this.loadProducts();
      return setInterval(this.loadProducts, this.props.pollInterval);
    },
    render: function() {
      return div({
        className: 'ProductList'
      }, h2({}, 'Products'), React.createFactory(AddProduct)({
        addProduct: this.handleAddProduct
      }), React.createFactory(Table)({
        products: this.state.data
      }));
    }
  });

  React.render(React.createFactory(ProductList)({
    url: './products.json',
    pollInterval: 1000
  }), document.getElementById('content'));

}).call(this);
